'use strict';

exports.__esModule = true;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reduxDevtoolsThemes = require('redux-devtools-themes');

var themes = _interopRequireWildcard(_reduxDevtoolsThemes);

var _reduxDevtools = require('redux-devtools');

var _reducers = require('./reducers');

var _reducers2 = _interopRequireDefault(_reducers);

var _Slider = require('./Slider');

var _Slider2 = _interopRequireDefault(_Slider);

var _SliderButton = require('./SliderButton');

var _SliderButton2 = _interopRequireDefault(_SliderButton);

var reset = _reduxDevtools.ActionCreators.reset;
var jumpToState = _reduxDevtools.ActionCreators.jumpToState;

var SliderMonitor = (function (_Component) {
  _inherits(SliderMonitor, _Component);

  _createClass(SliderMonitor, null, [{
    key: 'update',
    value: _reducers2['default'],
    enumerable: true
  }, {
    key: 'propTypes',
    value: {
      dispatch: _react.PropTypes.func,
      computedStates: _react.PropTypes.array,
      stagedActionIds: _react.PropTypes.array,
      actionsById: _react.PropTypes.object,
      currentStateIndex: _react.PropTypes.number,
      monitorState: _react.PropTypes.shape({
        initialScrollTop: _react.PropTypes.number
      }),
      preserveScrollTop: _react.PropTypes.bool,
      stagedActions: _react.PropTypes.array,
      select: _react.PropTypes.func.isRequired,
      theme: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.string])
    },
    enumerable: true
  }, {
    key: 'defaultProps',
    value: {
      select: function select(state) {
        return state;
      },
      theme: 'nicinabox',
      preserveScrollTop: true
    },
    enumerable: true
  }]);

  function SliderMonitor(props) {
    var _this = this;

    _classCallCheck(this, SliderMonitor);

    _Component.call(this, props);

    this.setUpTheme = function () {
      var theme = undefined;
      if (typeof _this.props.theme === 'string') {
        if (typeof themes[_this.props.theme] !== 'undefined') {
          theme = themes[_this.props.theme];
        } else {
          theme = themes.nicinabox;
        }
      } else {
        theme = _this.props.theme;
      }

      return theme;
    };

    this.handleReset = function () {
      _this.props.dispatch(reset());
    };

    this.handleKeyPress = function (event) {
      if (event.ctrlKey && event.keyCode === 74) {
        // ctrl+j
        event.preventDefault();

        if (_this.state.timer) {
          return _this.pauseReplay();
        }

        if (_this.state.replaySpeed === 'Live') {
          _this.startRealtimeReplay();
        } else {
          _this.startReplay();
        }
      } else if (event.ctrlKey && event.keyCode === 219) {
        // ctrl+[
        event.preventDefault();
        _this.stepLeft();
      } else if (event.ctrlKey && event.keyCode === 221) {
        // ctrl+]
        event.preventDefault();
        _this.stepRight();
      }
    };

    this.handleSliderChange = function (value) {
      if (_this.state.timer) {
        _this.pauseReplay();
      }

      _this.props.dispatch(jumpToState(value));
    };

    this.startReplay = function () {
      var _props = _this.props;
      var computedStates = _props.computedStates;
      var currentStateIndex = _props.currentStateIndex;
      var dispatch = _props.dispatch;

      if (computedStates.length < 2) {
        return;
      }
      var speed = _this.state.replaySpeed === '1x' ? 500 : 200;

      var stateIndex = undefined;
      if (currentStateIndex === computedStates.length - 1) {
        dispatch(jumpToState(0));
        stateIndex = 0;
      } else if (currentStateIndex === computedStates.length - 2) {
        dispatch(jumpToState(currentStateIndex + 1));
        return;
      } else {
        stateIndex = currentStateIndex + 1;
        dispatch(jumpToState(currentStateIndex + 1));
      }

      var counter = stateIndex;
      var timer = setInterval(function () {
        if (counter + 1 <= computedStates.length - 1) {
          dispatch(jumpToState(counter + 1));
        }
        counter++;

        if (counter >= computedStates.length - 1) {
          clearInterval(_this.state.timer);
          return _this.setState({
            timer: undefined
          });
        }
      }, speed);

      _this.setState({ timer: timer });
    };

    this.startRealtimeReplay = function () {
      if (_this.props.computedStates.length < 2) {
        return;
      }

      if (_this.props.currentStateIndex === _this.props.computedStates.length - 1) {
        _this.props.dispatch(jumpToState(0));

        _this.loop(0);
      } else {
        _this.loop(_this.props.currentStateIndex);
      }
    };

    this.loop = function (index) {
      var currentTimestamp = Date.now();
      var timestampDiff = _this.getLatestTimestampDiff(index);

      var aLoop = function aLoop() {
        var replayDiff = Date.now() - currentTimestamp;
        if (replayDiff >= timestampDiff) {
          _this.props.dispatch(jumpToState(_this.props.currentStateIndex + 1));

          if (_this.props.currentStateIndex >= _this.props.computedStates.length - 1) {
            return _this.pauseReplay();
          }

          timestampDiff = _this.getLatestTimestampDiff(_this.props.currentStateIndex);
          currentTimestamp = Date.now();

          _this.setState({
            timer: requestAnimationFrame(aLoop)
          });
        } else {
          _this.setState({
            timer: requestAnimationFrame(aLoop)
          });
        }
      };

      if (index !== _this.props.computedStates.length - 1) {
        _this.setState({
          timer: requestAnimationFrame(aLoop)
        });
      }
    };

    this.getLatestTimestampDiff = function (index) {
      return _this.getTimestampOfStateIndex(index + 1) - _this.getTimestampOfStateIndex(index);
    };

    this.getTimestampOfStateIndex = function (stateIndex) {
      var id = _this.props.stagedActionIds[stateIndex];
      return _this.props.actionsById[id].timestamp;
    };

    this.pauseReplay = function (cb) {
      if (_this.state.timer) {
        cancelAnimationFrame(_this.state.timer);
        clearInterval(_this.state.timer);
        _this.setState({
          timer: undefined
        }, function () {
          if (typeof cb === 'function') {
            cb();
          }
        });
      }
    };

    this.stepLeft = function () {
      _this.pauseReplay();

      if (_this.props.currentStateIndex !== 0) {
        _this.props.dispatch(jumpToState(_this.props.currentStateIndex - 1));
      }
    };

    this.stepRight = function () {
      _this.pauseReplay();

      if (_this.props.currentStateIndex !== _this.props.computedStates.length - 1) {
        _this.props.dispatch(jumpToState(_this.props.currentStateIndex + 1));
      }
    };

    this.changeReplaySpeed = function () {
      var replaySpeed = undefined;
      switch (_this.state.replaySpeed) {
        case '1x':
          replaySpeed = '2x';
          break;
        case '2x':
          replaySpeed = 'Live';
          break;
        default:
          replaySpeed = '1x';
      }

      _this.setState({ replaySpeed: replaySpeed });

      if (_this.state.timer) {
        _this.pauseReplay(function () {
          if (replaySpeed === 'Live') {
            _this.startRealtimeReplay();
          } else {
            _this.startReplay();
          }
        });
      }
    };

    this.containerStyle = function (theme) {
      return {
        height: '100%',
        fontFamily: 'monospace',
        position: 'relative',
        padding: '0 0.7rem 0.7rem 0.7rem',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        background: theme.base00,
        WebkitUserSelect: 'none', MozUserSelect: 'none', MsUserSelect: 'none'
      };
    };

    if (typeof window !== 'undefined') {
      window.addEventListener('keydown', this.handleKeyPress);
    }

    this.state = {
      timer: undefined,
      replaySpeed: '1x'
    };
  }

  SliderMonitor.prototype.render = function render() {
    var _props2 = this.props;
    var currentStateIndex = _props2.currentStateIndex;
    var computedStates = _props2.computedStates;
    var replaySpeed = this.state.replaySpeed;

    var theme = this.setUpTheme();

    var onPlayClick = replaySpeed === 'Live' ? this.startRealtimeReplay : this.startReplay;
    var playPause = this.state.timer ? _react2['default'].createElement(_SliderButton2['default'], { theme: theme, type: 'pause', onClick: this.pauseReplay }) : _react2['default'].createElement(_SliderButton2['default'], { theme: theme, type: 'play', onClick: onPlayClick });

    return _react2['default'].createElement(
      'div',
      { style: this.containerStyle(theme) },
      playPause,
      _react2['default'].createElement(
        'div',
        { style: { flex: 18 } },
        _react2['default'].createElement(_Slider2['default'], {
          min: 0,
          max: computedStates.length - 1,
          value: currentStateIndex,
          onChange: this.handleSliderChange,
          theme: theme
        })
      ),
      _react2['default'].createElement(_SliderButton2['default'], { theme: theme, type: 'stepLeft', onClick: this.stepLeft }),
      _react2['default'].createElement(_SliderButton2['default'], { theme: theme, type: 'stepRight', onClick: this.stepRight }),
      _react2['default'].createElement(_SliderButton2['default'], { theme: theme, type: 'playBackSpeed', replaySpeed: replaySpeed, onClick: this.changeReplaySpeed }),
      _react2['default'].createElement(
        'a',
        { onClick: this.handleReset,
          style: { textDecoration: 'underline', cursor: 'hand', color: theme.base06, flex: 1 }
        },
        _react2['default'].createElement(
          'small',
          null,
          'Reset'
        )
      )
    );
  };

  return SliderMonitor;
})(_react.Component);

exports['default'] = SliderMonitor;
module.exports = exports['default'];